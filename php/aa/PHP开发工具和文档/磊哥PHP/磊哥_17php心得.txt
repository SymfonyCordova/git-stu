其他技术
类的自动加载
	条件和要求
	1、当需要一个类的时候,就会自动调用某个函数(默认__autoload)并传入所需要的类的名字
	2、一个类应该保存到一个独立的"类文件中":即其中只有该类的定义,没有别的代码
	3、习惯上,类文件的命名要有一定的"规则",通常是:类名.class.php
	4、通常,我们需要各种类,存储在特定目录中,以方便确定其位置
	5、在该自动加载的函数中,"充分"使用传过来的类名,以构建一个合适的文件路径并载入
自定义自动加载函数
	基本模式为：
	spl_autoload_register("函数1");//声明"函数1"作为自动加载函数
	spl_autoload_register("函数2");//声明"函数2"也作为自动加载函数
	然后,就去定义这些函数,跟定义__autoload()函数一样
	这样,系统就一直
代码 
	spl_autoload_register("autoload1");//声明"autoload1"作为自动加载函数
	spl_autoload_register("autoload2");//声明"autoload2"作为自动加载函数
	function autoload1($classename){
		//@require_once './class/'.$classename.".class.php"
		$file='./class/'.$classename.".class.php";
		if(file_exists($file)){
			include_once $file;
		}
	}	
	function autoload2($classename){
		//@require_once './lib/'.$classename.".class.php"
		$file='./lib/'.$classename.".class.php";
		if(file_exists($file)){
			include_once $file;
		}
	}
	
对象的复制(克隆)
$obj1 = clone $obj2;
对象的遍历
	对象的遍历,跟数组的变量一样
	其实只能遍历出对象的"实例属性数据"
	foreach($对象名 as $key=> $value){
		//$key对象的属性,$value是其对应值
		//这里能够遍历出来的属性,只能是在该范围中"可访问属性"(就是要考虑访问控制权限)
	}
php内置标准类
	php语言内部,有很多现成的类,其中有一个,被称为"内置标准类"。
	这个类的内部可以什么都没有,类似这样
	class stdclass{}	
	其作用,可以存储一些临时的简单的数据,也可以用于类型转换时存储数据。
	$obj1->pp1=1;
	$obj1->pp1="3306";
其他类型转换为对象类型
	其他类型转换为对象类型,得到的结果是:内置标准类(stdClass)的一个对象
	语法形式:
		$obj1=(object)其他类型数据
		数组转换为对象：数组的键名当做属性名,值为对应值
			注意:数字下标的数据元素,转换为对象后的属性,无法通过对象语法获取,因此不推荐转换。
		null转换为对象：空对象
			$obj1=(object)null;
		其他标量转换为对象：属性名为固定的"scalar",值为该变量的值
			
php中,只支持局部的部分类型约束
	php中,只支持在函数(或方法)的形参上,设定类型约束目标,形式如下:
	function 方法名([要求使用的类型]$p1,[要求使用的类型]$p2,.....){
		//......
	}
	说明：
		1、定义一个函数(方法)时,一个形参,可以使用类型约束,也可以不使用;
		2、如果使用了类型约束,则对应的该实参数据,就必须是要求的那种数据类型。
		3、能够使用的类型约束,其实非常少,只有以下几种可用:
			数组：array;
			对象：使用类的名称,表示,传递过来的实参,必须是该类的实例;
			接口: 使用接口的名称,表示,传递过来的实参,必须是该接口的实现类的对象;
		
单列类的加强:禁止克隆
	对于一个类的对象,如果使用"clone运算符",就会克隆出一个跟当前对象完全一样的新对象出来,
	并且：
		此时还会自动调用该类中的魔术方法__clone():只要其中有该方法;
	则,要想实现单例类,就应该对这个单列类的对象"禁止克隆",做法是:
		私有化这个魔术方法:__clone();
	
与类有关的其他魔术方法
	序列化与反序列化技术
	序列化含义：
		将一个变量所代表的内存数据,转换为字符串形式并持久保存在硬盘上的一种做法。
	反序列化含义：
		就是将序列化之后保存在硬盘上的字符串的数据恢复其原来的内存形式的变量数据一种做法。	
	序列化做法
		$v1=123;
		$s1=serialize($v1);//将任何类型的变量数据,转换为字符串
		file_put_contents("文件路径",$s1);//保存在硬盘上
	反序列化做法
		$s1=file_get_contents("文件路径");//得到字符串
		$v1=unserialize($v1);//将字符串数据,反序列化为变量
		
	对象的序列化：
		1、对一个对象进行序列化,只能将其属性数据"保存来了",而方法被忽略(方法不是数据)
		2、对象的序列化的时候,会自动调用该对象所属类的魔术方法__sleep()
	对象的反序列化：
		1、对一个对象进行反序列化,其实是恢复其原来保存起来的属性数据,而且,此时必须需要依赖该对象原本所属类。
		2、对象的反序列化的时候,会自动调用该对象所属类的魔术方法__wakeup()
	
__tostring()魔术方法 比较常用
	含义：
		当对象当做字符串用的时候会自动调用魔术方法__tostring() 可以返回数据
		
	代码 
		class A{
			public $name;
			public $age;
			public $edu;
			function __construct($name,$age,$edu){
				$this->name=$name;
				$this->age=$age;
				$this->edu=$edu;
			}
			function __tostring(){
				$str="姓名：".$this->name;
				$str.="年龄：".$this->age;
				$str.="学历：".$this->edu;
				return $str;
			}
		}
		
		$obj1=new A('张三',18,'大学');
		echo $obj1;

__invoke()魔术方法 不推荐
	含义：将对象当做函数使用的时候会自动调用该方法
		class A{
			function __invoke(){
				echo "<br/>我是对象,别当做函数来使用"
			}
		}
		$obj1=new A();
		$obj1();
	
其他零碎
	与类有关的魔术常量：
	以前学过的魔术常量：
		__FILE__
		__DIR__
		__LINE__
	现在
		__CLASS__ 类名
		__METHOD__ 类的方法
	与类有关的函数
		class_exists("类名")判断类是否存在
		interface_exists("接口名")判断一个接口是否存在
		get_class($obj) 获得某个对象$obj所有类
		get_parent_class($obj) 获得类所有类的父类
		get_class_methods($obj) 获得类$所有类方法名,结果是一个数组,里面存储的是这些方法的名称
		get_class_vars() 获得某个对象$obj所有属性名,结果是一个数组,里面存储的是这些属性的名称	
		get_declared_classes() 获得"整个系统"所定义的所有类名
	与对象有关的函数
		is_object() 判断某个变量是否是一个对象
		get_object_vars($obj) 获得一个对象的所有属性,结果是一个数组,里面存储的是这些属性的名称	
		
	与类有关的运算符
	new 
	instanceof 判断一个变量(对象,数据)是否是某个类的"实例"
		class A{}
		class B{}
		class C extends A{}
		$a2=new A();
		$b2=new B();
		$c2=new C();
		$v1 = $a2 instanceof  A; //结果是true
		$v2 = $b2 instanceof  A; //false
		$v3 = $c2 instanceof  C; //true
		$v4 = $c2 instanceof  A; //true
			--推论：一个类的对象,必然也是这个类的上级类的对象
			
static  新用法和总结
	static 这个关键字,也可以向self一样,代表当前类,用于访问一个类的"静态属性或静态方法";
	但,
	static 在应用中,更灵活,因此更常见;
		因为static ,它代表的是调用当前方法的类,而不是其代码所在的类
		self比较死板,只代表这个单词本身所在位置的类。
static 总结
		含义：					位置实例:											
	代表函数或方法中静态变量	function f1(){ static $v1=1;}
	代表类中静态成员			class A{ static $p1=1; static function f1(){}}
	代表调用当前方法的当前类	class A{function f1(){echo static::属性或方法}}
	
面向对象编程的3大特征
封装
	是一个大的指导思想,目的是为了将一个类设计的更为健壮
	基本做法
		尽可能地将一个类的成员私有化,只开放那些必不可少的对外的属性或方法,能private的就不要
		protected。能protected就不要public 
继承
	是面向对象的基本思想和基本做法
	继承是代码重用的一种重要机制。
	
多态
	多态就是"多种形态",其实指的是,现实世界的"丰富多彩的表现形式",比如:
		人在吃饭
		猪在吃食
		鱼在进食
		小鸡啄米
		.......
		都具备吃这个行为
	在实际代码中(应用)中,多态常常有两种表现形式:
		1、不同对象,使用相同的方法,会表现为不同的结果!
		2、同一个对象,使用相同的方法,也可能会表现为不同的结果!--这其实是"方法的重载"