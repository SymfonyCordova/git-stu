php基本语法形式

-php的标记符
有以下形式
形式一(推荐)
<?php

	这里写符合php语法的语句
?>

形式二 (不推荐)
<script language="php">

	这里写符合php语法的语句
</script>
形式3 (不推荐)
<?

	这里写符合php语法的语句
?>
它依赖于php.ini的一个设置项
short_open_tag=Off
将其改为On就可以用

php的结束标记符(比如?>),如下情况可以省略:
	php的语句之后，再没有了html代码部分

-php的区分大小写特性
1、变量区分大小写
2、常量通常默认也区分，但可以人为设定不区分(但这种做法不推荐)
3、其他场合下的关键字都不区分，比如函数名,系统关键字(for,if,return ...)

-一条语句使用一个分号结束
1、在一个php的语句标记中的最后一个分号可省略
2、php结束标记省略则不能省略最后一个分号

-php的注释
单行注释
	形式1://注释内容
	形式2：#注释内容
多行注释
	/*注释内容，可以多行*/
2个多行注释的技巧
	有时候，我们因为测试或别的原因，需要将一大段代码进行多次进行"注释"或反注释;则此时
	可以使用如下技巧
	/*
		echo "<br/>代码1";
		echo "<br/>代码2";
		echo "<br/>代码3";
		echo "<br/>代码4";
	//*/
	注释
	//*
		echo "<br/>代码1";
		echo "<br/>代码2";
		echo "<br/>代码3";
		echo "<br/>代码4";
	//*/
	反注释
	if(1==0){
		echo "<br/>代码1";
		echo "<br/>代码2";
		echo "<br/>代码3";
		echo "<br/>代码4";
	}注释
	if(1==1){
		echo "<br/>代码1";
		echo "<br/>代码2";
		echo "<br/>代码3";
		echo "<br/>代码4";
	}反注释
	
-变量
基本理解
变量可以理解为只是一个代表一定存储空间及其中的数据的一个标识符--也就是一个名字
引用关系 使用一个变量就是指该变量所引用的值
形式以$开头。在php中，不支持"单纯定义"一个变量，而是,在第一次一个变量赋值的时候，
就算定义变量了

-变量的基本的操作
赋值
	$val=1;
取值
	在任何需要一个数据的语句中使用一个变量,此时就是指从该变量取得该变量的值
	echo $v1;//取出v1的值,并输出
	$v2=$v1;
	$v2=$v1+3;
	$v2=round($v1);
判断
	isset(变量名)：
	判断该变量是否存在，或改变量是否有数据值！存在或有数据值,就true否则就false
	$v1=isset($v1)//判断$v1是否存在,结果是false
	$s2=2;
	$v2=isset($s2) //true
	$s3=false;
	$v3=isset($s3)//true
	$s4='';
	$v4=isset($s4)//true
	$s5=null;//特别注意：null这个"值"(数据)的含义就是"没有数据"
	$v5=isset($s5);//false
删除
	unset(变量名)
	删除一个变量，并不是将该变量从程序中删除,而是，"断开"该变量名跟该变量原有的数据引用关系
	1、该变量名已经不指向任何数据了,则此时isset()判断结果就是false
	2、该数据(可能)没有任何变量指向它,就成了"无法使用的数据了"--通常就被自动回收了
	
变量的命名基本规则
	以字母下划线开头
	后面跟任意字母数字下划线

变量的传值方式
1、变量的传值方式,是指"一个变量,传递另一个变量"的内部细节形式--单对单
值传递
$v1=1;
$v2=$v1;
引用传递
$num1=1;
$num2=&$num1;

可变变量
$s1="abc";
$abc=10;
echo $$s1;	
在php中,一个$后面就是一个变量
可变变量的灵活性,动态变化以获取不同的数据值

预定义变量
php预先定义好的,直接使用就好
均是数组
系统定义与维护--即我们不应该给其赋值或销毁其指,只应该去"用其值"
具有超全局作用域
不同情况下可能具有不同的值

$_GET
用户提交所有数据get数据,有4种get方式
形式一 <form action="" method="get">
形式二 <a href="?data1=&data2="></a>
形式三<script>
	location.href="?data1=&data2="
</script>
形式四<script>
	location.assign("?data1=&data2=");
</script>
形式五
<?php
	header("location:?data1=&data2=");
?>

$_POST
表单提交所有数据==post数据
形式<form action="" method="post">
isset判断null
empty判断"空的"：0,'0',false,null,array() 如果为空 empty结果为true 否则为false

$_REQUEST
	$_GET+$_POST数据的合集
只有一个方式
<from action="?data1=&data2=" method="post">
</from>
默认get数据在前面 post数据再后
当post数据和get数据的数据项名称相同时(其实我们反对这么做)默认post覆盖get
可以修改在php.ini request_order = "GP" 或者覆盖前者
改 request_order = "PG";

$_SERVER
代表在一次浏览网页的过程中的浏览器端的一些信息或服务器端的一些信息
我们只是在程序中可以拿到这些信息,并用于编程所需,比如：取得用户的ip地址
注意：
	这种信息，随着不同的页面，和不同的服务器,以及不同时刻,都可能不同
要求
	大约有30个左右的信息,我们只要知道其中5个左右!
	$_SERVER['REMOTE_ADDR']:获取访问者的IP地址
	$_SERVER['SERVER_ADDR']:获取服务器所在的IP地址
	$_SERVER['SERVER_NAME']:获取服务器名字,其实就是站点设置中的servername
	$_SERVER['DOCUMENT_ROOT']:获取站点真实物理地址,其实就死站点的documentroot
	$_SERVER['PHP_SELF']:获取当前网页地址(不含域名部分)
	$_SERVER['SCRIPT_FILENAME']:获取当前网页地址物理路径
	$_SERVER['QUERY_STRING']:获取当前网页地址中的所有get数据(就是?号后面的部分)但只是一个整体的字符串而已

$GLOBALS变量
它也是一个"重复性数据",它里面存储了我们自己定义的所有"全局变量"
$v1=1;
echo $v1;//1
echo $GLOBALS['v1'];//1
这个变量,主要是用在局部范围不可以使用全局变量的时候,又需要使用该全局变量的值,此时就可以用它来取得全局变量的值。