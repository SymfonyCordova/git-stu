算术运算符
	符号 + - * / %
	说明:他们都是针对数字进行运算的
	如果他们两边有不是数字的数据,就会自动转换为数字
	其中取余运算(取模运算) % ,它只针对整数进行运算,如果不是,会自动截取为整数
		11.3 % 3 相当于 11 % 3 
		11.8 % 3  相当于 11 % 3
自增自减运算符 
	常规针对数字进行自加1或自减1。
	字符串：只能自增,且自增的效果就是“下一个字符”，且只能针对字母或数字
	布尔值自增递减无效
	null递减无效,递增结果为1
		
	都是对别人的影响
	独立的前++，后++都一样			
	前++ 先自己加1,然后执行别的语句
	后++ 先执行别的语句	，再自己加1	
	for循环推荐前++ 
	for($i=0;$i<100000;++$i){
	}
	for($i=0;$i<100000;$i++){
	}
	
比较运算符
	符号：> >= < <= == != === !== 
	一般比较：是针对数字进行的大小比较
	==和===比较：前者叫模糊相等的比较,后者叫做精确相等的比较(只有数据的类型和数据的值/内容,都相等,才是全等)
				必须能够找到手册的类型比较表：附录》php类型比较表。
	不要对浮点数直接进行大小比较
	
	常见不同类型(标量类型)数据之间的比较规律；
		如果比较的数据中,有布尔值,转为布尔值比较,布尔值比较只有一个规则：
			true>false
		否则,如果有数字值,就转为数字值比较:这就是常规比较。
		否则,如果两边都是"纯数字字符串",转为数字比较
		否则就按字符串比较。字符串比较的规则是:
			对两边的字符串,一个一个从前往后取出字符并进行比较,谁"先大",结果就是它大。
		
		"abc">true //false
		"abc">false //true
		"0" > false //false
		3>"12";//false
		3>"12abc"//false
		"3">"12" //false
		"abc">"c"//false
		"abc">"ab123abc"//true
		"3abc">"12abc"//true
		1>"a"//true
		"1">"a"//false
		
逻辑运算符
	逻辑运算符都是针对"布尔值"进行的运算
	如果不是布尔值,就会转换为布尔值进行的
	布尔值只有2个:true ，false
	基本运算规则(真值表)
	&&
	||
	!
	与运算有'短路'现象
	如果一个语句中,通过与运算需要进行多项判断,而且不同的判断具有明显不同的'复杂程度'则我们
	应该将简单的判断放在前面,这时候我们就可以利用这个短路现象以达到提高效率的目的。
	
	逻辑或有'短路'现象
	如果一个语句中,通过与运算需要进行多项判断,而且不同的判断具有明显不同的'复杂程度'则我们
	应该将简单的判断放在前面,这时候我们就可以利用这个短路现象以达到提高效率的目的。

字符串运算符
	1、符号只有一个 . 也衍生出另一个：.=
	2、含义：就是将这个符号两边的字符串链接起来
	3、如果两边不是字符串,就会自动转换为字符串,然后链接起来
	"ab".3 //"ab3"
	"12".3 //"123"
	12.3 //123
	
赋值运算符
一个基本复制运算符： =
+= -= ....

条件(三目,三元)运算符
只有一个,形式如下：
	数据值1 ？ 数据值2 ：数据值3
	注意：如果数据1不是布尔值,也会转换成为布尔值
	$score=66;
	$valuation=$score>=60?"及格"："不及格"; //及格
	$score=50;
	$valuation=$score>=60?"及格"："不及格"; //不及格
	$score=56;
	$valuation=$score ?"及格"："不及格";//及格
	
位运算符
基础规定
	1、位是什么？就是2进制数字的每一个"位",一个整数数字,有(由)32个位构成！
	2、位运算符是仅仅针对整数进行的运算符；
	3、位运算符有如下几个
		& 按位与
		| 按位或
		~ 按位非 取反
		^ 按位异或
			形同为0
			不同为1
整数的按位与运算(&)
	形式 $n1 & $n2; //n1 , n2是2个任意整数
	含义：
		将该2个整数的二进制数字形式(注意：都是32位)的每一个对应位上的数字进行基本按位与运算之后的结果
		注意：他们运算的结果,仍是一个普通的数字(10进制)
左移 右移

原码
	一个数的最左边一位是符号位 1为负数 0为整数
反码
	正数的反码是其本身
	负数的反码 符号位不变其他位取反
补码
	正数的补码是其本身
	负数的补码是符号位不变,其他位取反后+1
	计算机内部的运算,实际上全部都是使用补码进行的,而且运算的时候,符号位不再区分,直接也当做"数据"参与计算
	5+3简单  5-3=5+(-3)

数组运算符
+： 数组联合,也可以理解为"数组串联"
	将右边的数组联合并到左边数组的后面,得到一个新数组。如果有重复键，则结果以左边的为准

==如果两个数组具有相同的键名和键值(可以顺序不同,或类型不同),则返回true・
！=
===如果两个数组具有相同的键名和键值并且顺序相同类型也不同,则返回true
！==

错误控制运算符@
通常就用在一个地方
$link=@mysql_connect("数据库服务器地址","用户名","密码");
作用时：
	如果该链接数据的语句失败(比如链接不上),则屏蔽该失败的错误提示

运算符的优先级
	运算符,都有优先级问题
		记住以下几条就可以了
		要意识到运算符优先级的问题
		括号最优先,赋值最落后(通常)
		先乘除后加减
		大致：单目运算符》算术运算符》比较运算符》逻辑运算符(除了"非"运算符)
		能查到手册  语言参考》运算符》运算符的优先级

if分支结构
switch结构
for循环