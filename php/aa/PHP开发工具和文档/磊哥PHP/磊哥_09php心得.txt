表定义语句
	创建表
	基本语法形式
		create table [if not exists]表名(字段列表[,索引或约束列表])[表选项列表]
		或这样来表达
		create table [if not exists]表名(字段1,字段2,...[,索引1,索引2,...])[表选项1,表选项2,...]
		
	字段设定形式:
		字段名 类型 [字段属性列表1,字段属性列表2....]
		说明:
			1、字段名可以自己取
			2、类型就是前面学的数据类型：int, tinyint,float,double,char(6),varchar(25),text,datetime...
			3、字段属性可以与有多个(根据具体的需要),相互之间直接空格隔开,主要如下几个:
				auto_increment 只用于整数类型,让该字段的值自动获得一个增长值。通常用于做一个表的
				第一个字段的设定，并且通常还当做主键(primary key);
				primary key:用于设定该字段为主键,此时该字段的值就可以"唯一确定"一行数据
				unique key:设定该字段是"唯一的"
				not null:用于设定该字段不能为空(null),如果没有设定,则默认
				default:用于设定该字段的默认值,此时如果insert没有给值得时候就是使用该默认值
				comment "字段说明文字"
	
	索引
	什么是索引
		索引是系统内部自动维护的隐藏的"数据表",它的作用是,极大地加快数据的查找速度！
		这个隐藏的数据表,其中的数据是自动排好序的,其查找速度就是在这个基础上。
		通常,所谓建立索引,其实是指定一个表的某个或某些字段作为"索引数据字段"就可以了；形式为：
			索引类型(要建立索引的字段名)
		索引类型有如下几个:
			普通索引:形式：key(字段名) 
					 含义：就是一个索引而已,没有其他作用,只能加快查找速度。
			唯一索引:形式：unique key(字段名) 
					 含义：是一个索引,而且还可以设定其字段的值不能重复(唯一性),加快查找速度。
			主键索引:形式：primary key(字段名) 
					 含义：是一个索引,而且还具有区分该表中的任何一行数据的作用(其实也是唯一性),加快查找速度。
						它其实比唯一性索引多一点功能：唯一性索引可以为空null,而主键不能为空
			全文索引:形式：fulltext(字段名) 
			外建索引:形式：foregin key (字段名) references 其他表(对应其他表的字段名)
				什么是外键？
					外键,就是指,设定的某个表(tab1)某个字段(f1),它的数据的值,必须是在另一个表(tab2)中的某个字段(f2)中存在！
			约束
			什么叫约束？
				约束，就是要求数据需要满足什么条件的一种"规定"。
			主要有如下几种约束：
				主键约束： 形式： primary key(字段名)
							含义(作用) :使该设定字段的值可以用于"唯一确定一行数据",其实就是"主键"的意思
				唯一约束： 形式： unique key(字段名)
							含义(作用) :使该设定字段的值可具有"唯一性",自然也区分的
				外键约束： 形式： foreign key(字段名) references 其他表名(对应其他表中的字段名)
							含义(作用) :使该设定字段的值,必须在谁对应的表中的对应字段中已经有该值了。
				非空约束： 形式：not null ,其实就是设定一个字段时写的那个"not null"属性。
				默认约束:  形式：default xx ,其实就是设定一个字段时写的那个"default 默认值"属性。
				检查约束： 形式：check (某种判断语句),比如,
						create table tab1(
							age tinyint,
							check (age>=0 and age<=100)/*这就是检查约束*/
						);
				其实，主键约束，唯一约束，外键约束，只是"同一事件的2个不同的说法",他们同时也称为"主键索引","唯一索引","外键索引"
	表选项列表
	表选项就是,创建一个表的时候,对该表的整体设定,主要有如下几个：
	charset -- 要使用的字符编码
	engine  -- 要使用的引擎(也叫表类型)
	auto_increment=设定当前表的自增长字段的初始值,默认是1
	comment='该表的一些说明文字'
	说明：
		1、设定的字符编码是为了跟数据库设定的不一样,如果一样,就不需要设定了,以为其会自动使用数据库级别的设定
		2、engine(存储引擎)在代码层面,就是一个名词,InnoDB,MyIsam,BDB,Archive,Memory。默认是InnoDB
	什么叫存储引擎？
		存储引擎是将数据存储到硬盘的"机制"。其实,也就是几种机制(如上名字所述)
		不同的存储引擎,其实主要从2个层面来设计存储机制
			1、尽可能快的速度;
			2、尽可能多的功能;
		选择不同的存储引擎,就是上述性能和功能的"权衡".
		
修改表
	几点说明:
	1、修改表,是指修改表的结构--正如创建表也是设定表的结构
	2、创建表能做的事,修改表几乎都能做--但很不推荐去修改表,而是应该在创建表的时候就基本确定表的结构。
	3、大体来说,有：
		3.1、可以对字段进行，添加，删除，修改
		3.2、可以对索引进行，添加，删除
	4、表的选项,通常"都是修改",即使不写任何表选项，他们都有默认值
	
	常见几个:
		添加字段：alter table 表名 add[column] 新字段名 字段类型 [字段属性列表]
		修改字段(并可改名)：alter table 表名 change [column] 旧字段名 新字段名 新字段类型 [新字段属性列表]
		删除字段(并可改名)：alter table 表名 drop [column] 字段名 
		添加普通索引 alter table 表名 add key/index [索引名]([字段一，][字段二......])
		添加唯一索引(约束) alter table 表名 add unique key [索引名]([字段一，][字段二......])
		添加主键索引(约束) alter table 表名 add primary key [索引名]([字段一，][字段二......])
		修改表名:alter table 表名 旧表名 rename [to] 新的表名
		
删除表
	drop table [if exists] 表名
其他表的相关语句:
	显示当前数据库中的所有表:show tables;
	显示某表的结构:desc 表名; 或:describe 表名
	显示某表的创建语句：show create table 表名
	从已有表复制表结构: create table [if not exists] 新表名 like 原表名
	
视图(view)定义语句
	什么叫视图?
		类比:什么叫函数？
			就是一段代码,我把它"封装起来",并给一个名字,以后,要使用(执行)该段代码,就方便了用函数名可以了
		视图:
			就是一个select语句(通常比较复杂),我们给其一个名字,以后,要使用(执行)该select语句,就方便了.用该视图名字就可以了
	视图的创建语法：
		create view v1 as select id,f1,name,age,email,p_id f3 from 表1 where id>7 and id<100 or f1<1000 and age>10;
	使用视图：
		基本上,当做一个表用就好了
	删除视图：
		drop view [if exists] 视图名
	