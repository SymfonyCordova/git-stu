数组
一系列数据的集合,他们按设定的顺序列为一个"链的形状"
注意:php中的数组单元的顺序,跟下标无关！
数组基础
	数组定义
		$arr1=array(3,11,5,18,2);//索引数组 默认下标为0,就是从0开始的整数
		$arr2=array('a'=>3,'bb'=>11,'cc123'=>18,'xyz'=>2);//关联数组,下标为字符串
		$arr3=array(1=>3,10=>11,3=>18,88=>2);//下标可以认为给定
		$arr4=array(1=>3,'a1'=>11,3=>5,'mm'=>18,88=>2);//下标可以数字和字符串混合使用
		$arr5=array(5=>3,11,3=>5,'mm'=>18,2);//有指定下标,也有"自动下标"
											//此时下标为：5,6,3,mm,7
											//可见,自动下标为"前面最大数字下表+1"
		$arr6=array(5=>3,7.7=>11,3=>5,'mm'=>18,2);//此时下标为：5,7,3,mm,8
		$arr7=array(5=>3,true=>11,false=>5,'mm'=>18,2);//此时下标为：5,1,0,mm,6
		$arr8=array(1=>3,3=>33,true=>11,);//此时下标为：1,3 其对应值为11,33
										//下标如有重复,后面的值覆盖前面的值
		$arr9=array(1=>3,-3=>33,11,);//此时下标为：1,-3 ,2 注意最后一个逗号可以有
	其他形式
		$arr10[]=3;
		$arr10[]=11;
		$arr10[]=4;//该数组下标0,1,2
		$arr11['a']=3;
		$arr11['bb']=11;
		$arr11['cc123']=5;//该数组下标a,bb,cc123
		$arr12[1]=3;
		$arr12[]=11;
		$arr12['cc123']=5;//该数组下标为1,2,'cc123'
		特别注意：php中,数组单元的顺序,由其"放入"顺序决定,而不是下标。
	
	数组取值
	根据下标取值,总体上,可以将取得一个数组的单元的值,看组取得一个变量的值完全一样
	
数组的分类
	按键值关系来分
		索引数组 严格按照从0开始的连续的整数作为下标
		关联数组 按字符串并一定程度上表明了该单元的含义
			$conf=array(
				'host'='localhost',
				'port'=3306,
				'username'='root',
				'password'='123',
			);
		混合数组 下标既有数字和字符串
	按数组的维数(复杂程度)分
		一位数组
			$a=array(1,11,111);
			$b=array(2,22,222);
			$c=array(3,33,333);
		二维数组
			$add=array(
				array(1,11,111),
				array(2,22,222),
				array(3,33,333),
			);
		多维数组

数组的基本使用
	求一位数组的平均值
		<?php
			header("Content-Type:text/html;charset=utf-8")
		?>
		$arr=array(3,11,5,18,2);
		$len=count($arr);
		$sum=0;
		$c=0;
		for($i=0;$i<$len;++$i){
			$sum+=$arr[$i];
			++$c;
		}
		echo "<br>平均值为: ".($sum/$c);
	求二位数组的平均值
		$add=array(
			array(1,11,111),
			array(2,22,222,2222),
			array(3,33,333,3333,4333)
		);
		
		$len=count($add);
		$sum=0;
		$c=0
		for($i=0;$i<$len;++$i){
			$temp=$add[$i];
			$len2=count($temp);
			for($j=0;$j<$len2;++$j){
				$sum+=$temp[$j];
				++$c;
			}
		}
		echo "<br>平均值为: ".($sum/$c);
	求一个一位数组的最大值及其下标
		$arrc=array(13,8,5,11,22,2);
		$max=$arrc[0];
		$len=count($arrc);
		$pos=0;
		for($i=0;$i<$len;++$i){
			$max = $max < $arrc[$i] ? $arrc[$i] : $max;
			$pos=$i;
		}
	求交换一个一位数组的最大值和最小值的位置
		$a=3;
		$b=4;
		$temp=$a;
		$a=$b;
		$b=$temp;

数组的遍历
	foreach($arr as [$key=>] $val ){
		//循环体
	}
	数组指针操作及遍历原理
		$v1=current($数组)//获取数组的当做指针所在单元的"值"
		$v2=key($数组)//获取数组的当做指针所在单元的"键"(下标)
		$v3=next($数组)//先将数组的指针移向下(后)一个单元,然后取得新单元的值
		$v4=prev($数组)//先将数组的指针移向上(前)一个单元,然后取得新单元的值
		$v5=end($数组)//先将数组的指针直接移向最后一个单元,然后取得新单元的值
		$v5=reset($数组)//先将数组的指针直接移向第一个单元,然后取得新单元的值
		
		<?php
			$arr4=array(1=>3,'a1'=>11,3=>5,'mm'=>18,88=>2);
			$v1=current($arr4);
			$v2=key($arr4);
			echo "<br />初始,单元的下标为值分别为：{$v2},{$v1}";
			
			$v3=next($arr4);
			$v4=key($arr4);
			echo "<br />初始,现在当前单元的下标为值分别为：{$v3},{$v4}";
			next($arr4);
			next($arr4);
			next($arr4);//可能会移动出去
		?>
	
	foreach 的原理就是根据指针的原理得来的
		$arr=array(1=>3,'a1'=>11,3=>5,'mm'=>18,88=>2)
		foreach($arr as $key => $val){
			echo "<br> $key=>$val";
		}
		$v=current($arr);
		$k=key($arr);
		echo '<br/> 此时遍历之后的位置'.var_dump($k);//false
		echo '<br/> 此时遍历之后的值'.var_dump($v);//null
		
	for和next遍历数组
		for循环只能循环连续整数的下标数组,但是php数组下标很多种所以要使用for next()
		$arr=array(1=>3,'a1'=>11,3=>5,'mm'=>18,88=>2) 这个for搞不定 不用foreach的话用for next()
		for($i=0;$i<count($arr);++$i){
			$key=key($arr);
			$value=current($arr);
			echo "<br/>$key = > $value";
			next($arr);
		}
	while each list
		先学each()函数的使用
			先取得一个数组的"当前单元"的下标和值(并放入一个数组),然后将指针移到下一个单元。
			使用形式  $a=each($数组名);//此时$a就是一个数组了
			each取值的时候，只取得数组的某一项的数据（含键和值）但存储的时候做了双份存储
			做了双份存储目的是为了提供方便而已可以灵活使用键值
		再学list()“函数”的使用很奇怪!!!!!!!!不是函数又像函数
			用于一次性取得一个数组中从开始的数字下标的多个单元的值！
			形式：
				list($变量1,$变量2,$变量3,.....)=数组
				作用：
					上述代码相当于如下代码:
					$变量1=$数组[0];
					$变量2=$数组[1];
					$变量3=$数组[2];
					......
				注意：这里变量的个数,要跟该数组的数字下标的单元对应,如果某个变量对应的该数字下标不存在，就会报错！
	最后 while-each-list 配合使用
		$arr=array(1=>3,'a1'=>11,3=>5,'mm'=>18,88=>2);
		while(list($key,$value)=each($arr)){//几乎是模式化的写法
			echo "<br/> $key = > $value";
		
		对比foreach($arr4 as $key = >$value){
			echo "<br/> $key = > $value";
		}完全一样
		
	数组遍历的细节
	foreach也是正常的循环语法结构,可以有break和continue等操作。
	遍历过程中值变量默认的传值方式是值传递。
		操作中不该变原来数组的值
	遍历过程中值变量可以人为设定为引用传递:foreach($arr as $key = > &$value){......}
		操作中改变原来数组的值 但是键变量不可以引用传递 不然报错 &$key是不可以的
	foreach默认是原数组上进行遍历。如果在遍历过程中对数组进行某种修改或某种指针操作,则会复制数组后在复制的数组上继续遍历循环(原数组保持不变)。
		$arr5=array(1=>3,'a1'=>11,3=>5,'mn'=>18,88=>2);
		foreach($arr5 as $k1 = > $v1){
			echo "<br/>$k1:$v1";
			if($k1===3){
				break;
			}	
		}
		$r1=current($arr5);//是多少？
		$r2=key($arr5);//是多少？
		echo "<br/> 此时数组指针指向的单元为：$r2=>$r1"
		了
		//虽然修改了遍历不受影响，好像还按照'既定方针'进行下去 
		//当前的遍历还是按照没修改之前的进行但此时$arr6却是修改了   
		$arr6=array(1=>3,'a1'=>11,3=>5,'mn'=>18,88=>2);
		foreach($arr6 as $k2 = > $v2){
			echo "<br/>$k2:$v2";
			if($k1===3){
				$arr6[99]='新的数据项';//即当我们循环到中途是,对该数组添加了一项
				//而且,是添加到数组的末尾。
			}	
			print_r($arr6);//这里你能看到修改后的打印出来！   
	foreach中如果值变量是引用传递,则无论如何都是在原数组上进行。
		$arr6=array(1=>3,'a1'=>11,3=>5,'mn'=>18,88=>2);
		foreach($arr6 as $k2 = > &$v2){
			echo "<br/>$k2:$v2";
			if($k1===3){
				$arr6[99]='新的数据项';//即当我们循环到中途是,对该数组添加了一项
				//而且,是添加到数组的末尾。
				//这里因为用的引用传递
			}	
			print_r($arr6);//这里你能看到修改后的打印出来！ 
数组排序
	排序函数 sort asort 
	手册》函数参考》变量与类型相关扩展》数组》Sorting Arrays
数组函数分类
	指针操作函数 current key next prev,reset end each
	单元操作函数 array_pop array_push array_shift array_unshift array_slice array_splice
	排序函数 sort asort ksort usort rsort arsort krsort shuffle
	查找函数 in_array,array_key_exists array_search
	其他函数 count array_reverse array_merge array_sum array_keys array_values array_map array_walk range
		
冒泡排序算法
	$a=array(9,3,2,5,8,7);
	从数组左边开始,依次两两比较相邻的2个数据的大小，如果发现左边的比右边大,则将他们进行交换,这样进行一趟之后,必然可以确定最大的一个数据
	放在最右边。换次方式,对"剩余的数据"继续进行下一趟,则有会确定这些剩余数据最大值放在剩余数据的最右边
	
	规律描述
		1、假设数组的数据有n个
		2、要进行比较的趟数为n-1次
		3、每一趟要比较的数据都比前一趟少一个,第一趟比较n个(即比较n-1次)
		4、每次比较,如果发现左边的比右边大,就对这两者进行交换位置
	代码
		$a=array(9,3,2,5,8,7);
		$n=count($a);
		for($i=0;$i<$n-1;++$i){
			for($j=0;$j<$n-$i-1;++$j){
				if($a[$j]>$a[$j+1]){
					$t=$a[$j];
					$a[$j]=$a[$j+1];
					$a[$j+1]=$t;
				}
			}
		}
选择排序
	求得一个数组的最大值的下标,并将这个最大值下标的单元跟最后一个单元进行交换
	规律描述
		1、假设数组的数据有n个
		2、要进行交换的趟数为n-1次
		3、每一趟要都要求出'剩余数据中'的最大值单元，并且剩余数据的数量每一趟都少一个,第一趟有n个
		4、每一趟找出最大值单元后,都要进行交换：最大值单元,跟剩余数据中的最后一个单元交换。
		$a=array(9,3,2,5,8,7);
		$n=count($a);
		for($i=0;$i<$n-1;++$i){
			$max=$a[0];
			$pos=0;
			for($k=0;$k<$n-$i;++$k){
				if($max<$a[$k]){
					$max=$a[$k];
					$pos=$k;
				}
			}
			$t=$a[$pos];
			$a[$pos]=$a[$n-$i-1];
			$a[$n-$i-1]=$t;
		}

二分查找
	所谓查找算法,大体主要是解决这样一个问题:找出某个数组中,是否存在某个值(数据).
	顺序查找算法
		$a=array(11,13,1,8,9,33,34,22,14,55,.......);
		需求：
			请找出数组中是否有88？
			请找出数组中是否有33？
	二分查找算法
		二分查找算法的前提：
			1、针对的是索引数组
			2、针对的是已经排好序的数组
			$a=array(1,3,11,18,19,33,34,42,44,55,56,58,60,61,72,75,88,90,91,93,95,98);
			$search=33;
			$len=count($a);
			function binary_search($arr,$s,$begin,$end){
				$mid=floor(($begin+$end)/2);
				$mid_value=$arr[$mid];
				if($mid_value==$s){
					return true;
				}elseif($mid_value>$s){
					if($begin>$mid-1){
						return false;
					}
					$re=binary_search($arr,$s,$begin,$mid-1);
				}else{
					if($mid+1>$end){
						return false;
					}
					$re=binary_search($arr,$s,$mid+1,$end);
				}
				return $re;
			}
			$v1=binary_search($a,$search,0,$len-1);
			echo "结果为：";var_dump($v1);
	效率问题
		1000个数据,约10次找出
		100万个数据,约20次找出