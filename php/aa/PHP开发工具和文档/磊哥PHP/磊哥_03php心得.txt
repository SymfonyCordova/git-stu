常量
定义1
	define("常量名",常量值);
	define("PI",3.14);
	define("SCHOOL","php");
定义2
	const 常来名 =常来值;
	const CC1=1234;
	const CC2='abcd';

使用----取值
使用形式1
	echo PI;
	echo SCHOOL;
	$s1=PI*3*3;
使用形式2
	constant(CC1);
	constant(CC2);
	constant(PI);
	constant(SCHOOL);
取得常量值得灵活性方法
$i=1;
$c1="CC".$i;
echo constant($c1);

常量变量的区别
	定义形式不同
	使用形式不同：常量无需$符号
	可变程度不同:常来的值不可以改变,常量也不可以销毁
	作用范围不同：常量具有超全局作用域(函数内外都可以直接使用)
	可用类型不同：常量只能存储标量类型(整数,浮点数,字符串,布尔)

判断常量是否存在(在多人开发的时候,很有用)
	使用defined()函数
		存在就返回true
		不存在就返回false
	
在php中使用一个未定义的常量的时候,系统会直接将该常量当做"有值"的常量区使用
并且其值就是该常量名---虽然系统会报错

预定义常量
系统定义好的一些常量,大约几百个,我们只要知道几个就行
	M_PI：圆周率的常量值
	PHP_OS :就是php运行所在操作系统
	PHP_VERSION ：就是php的版本号
	PHP_INT_MAX:php最大整数值
	更多参考
		php手册》附录》保留字列表》预定义常量
魔术常量
	其实只是常量的形式,但没有常量的"恒常"的含义：其值其实会变化的,只有很少的几个
	__FILE__ :代表当前网页文件的完整物理路经
	__DIR__  ：代表当前网页所在的文件夹
	__LINE__ ：代表当前这个常量名所在行号
	
数据类型
	总体划分
		有8种数据类型
		基本类型(标量类型)：
		整数类型：int integer 
			4种写法
				$n1=123;//10进制数字写法
				$n2=0123;//8进制数字写法
				$n3=0x123;//16进制数字写法
				$n4=0b1010;//2进制数字写法
				以上在网页输出本质上还是10进制数
			进制转换问题
				bin:2进制
				oct:8进制
				dec :10进制
				hex:16进制
			进制转换主要分2种写法
				decbin(一个10进制数字)结果返回的是该数字的2进制字符串  //10进制转2进制
				decoct(一个10进制数字)结果返回的是该数字的8进制字符串  //10进制转8进制
				dechex(一个10进制数字)结果返回的是该数字的16进制字符串  //10进制转16进制
			其他3种形式转10进制
				bindec(一个2进制字符串)结果返回的是该2进制数字字符串对应的10进制数字  
				octdec(一个8进制字符串)结果返回的是该8进制数字字符串对应的10进制数字  
				hexdec(一个16进制字符串)结果返回的是该16进制数字字符串对应的10进制数字
			那么有没有binhex?？？？？没有 只能间接转换
		浮点数类型 float double 
		字符串类型 string
		布尔类型 bool boolean 只有false true
	复合类型
		数组：array
		对象：object
	特殊类型
		空类型 ：null
		资源类型：resource
浮点类型
浮点数的2种表示形式
1、常规写法
    $v1=123.456;
2科学计数法：带一个特殊符号"E"
    $v1=123.456E2//含义为：123.456乘以10的3次方
    $v2=123.456E3//含义为：123.456乘以10的3次方,虽然结果是123456,但是仍是浮点型
    $v3=123E4//含义为：仍是浮点型
浮点数使用的细节深入知识
    浮点数不应进行大小比较
    因为：
        1, 所有数字，最终的表现形式，都是2进制！
        2, 浮点数的2进制形式，不能完全表达准确，最终只能"很高的精度接近理论值"
        3, 因此浮点数比较是不可靠的
    php中输出:8.1/3的结果为：2.7
    但js中输出：8.1/3的结果2.699999999997
    说明：php中输出其实做了一定的处理之后显示结果，而js的输出是该计算结果的"真实反应"。
    那应该怎么办呢？
       1考虑实际应用的精度的情况下，去将要比较的浮点数，转换为整数之后再比较。
       比如：
        要求精度为3位小数，则都乘以100，然后取整比较；
        要求精度为4位小数，则都乘以1000，然后取整比较；
        ......
        2当整数运算的结果超出整数的范围后，会自动转换为浮点数（了解）

        获取一个数据（变量）的类型函数有：
        gettype()返回的是该类型的名字（字符串）
        var_dump($变量)会输出该变量的类型，数据内容（以及长度）

字符串
    有如下4种形式：
    形式1：$str1="字符串内容";
    实际上，单引号字符中,只有最后一个"\"才是必须进行转义的。

    形式2：$str2='字符串内容';
    //双引号字符串
    //其实需要或可以识别的转义符有:\\ \" \n(换行) \r（回车）\t(tab符)
    //还有一个:\$,表示"$"符，其实取消了其在双引号字符串中的“变量的含义”

    形式3：$str3=<<<"标识符A"
    字符串内容....
    标识符A

    形式4：$str4=<<<'标识符B'
    字符串内容....
    标识符B;

布尔类型
    单词是bool,boolean
    其中只有2个数据 true false
	布尔类型的一个常见应用情况是：对一个变量直接进行判断
	这里的判断，永远是指：判断该变量（数据）"是否为真"
	对于这种情况，只有如下数据是被当做"假"(false):
	0,0.0,"","0",null ,array() ,false,还有一个"未定义的变量"
	其余都是真
	参考手册
		手册表》附录》PHP类型比较表
		
类型转换
	自动转换
		在任何运算中,如果需要某种类型的数据，而给出的数据不是该类型，通常
		都会发生自动转换：将该类型转换为目标需要的类型
		比如：octdec($x),bindec($x),hexdec($x)//这里就要$x必须是字符串,如果
		不是，就会转换;
		$v1=1+'2';//此时也发生了自动转换
		
		<?php
			//演示常见的自动转换  
			$v1=1+2;//3
			$v2=1+'2';//3
			$v3="1"+2;//3
			$v4="1"+"2";//3
			//在php中，算术运算符，就只对数值进行计算
			$v5=1+'2abc'；//3
			$v6='1'+"2abc"；//3
			$v7='1def'+'2abc';//3
			$v8='1def'+'abc2';//1
			$v9="def1"+"abc2";//0
			//由此可见，只识别字符串的前面数字部分
			$v10=1+true;//2
			$v11=1+false;//1

			//以上运算中，也适用于-，*，/ ，% 
		?>
		
	强制转换
		自动转换类型是有"运算符"或类似运算符的语句来决定的
		而；
		强制类型转换,仅仅是一个简单的语法
			形式：(目标类型)数据
			含义：将该数据转换为设定的目标类型
			<?php
				$v1=123;
				$s1=(float)$v1;//将v1值转换为float类型
								//注意，此时$v1还是整数123;
				$s2=(string)$v1;//将v1值转换为string类型
				echo "<br>s1为：".var_dump($s1);
				echo "<br>s2为：".var_dump($s2);
			?>
			通常的转换目标类型有:
			(int),(float),(string),(bool),(array),(object)
			上述强制类型转换,并不改变该变量的本身数据或类型
			对应，有一个语法是直接改变变量的数据(及类型)
			settype($变量名,"目标类型");
				$v2=123;
				setType($v2,"string");//直接转换v2类型为string
				echo "<br>v2为：".var_dump($v2);

有关类型相关函数
var_dump():用于输出变量的"完整信息",几乎只用于调试代码
gettype($变量):获取该变量的类型名字，返回的是一个表示该类型的名字 比如："string","bool","double"
settype($变量名,"目标类型")：将该变量强制改变为目标类型;
isset(),empty(),unset()...省略
is_XX类型()系列函数：判断某个数据是否为某种类型,有如下一些:
	is_int($x);
	is_float($x);
	is_string($x);
	is_bool($x);
	is_array($x);
	is_object($x);
	is_null($x);
	is_numeric($x);判断是否是一个数字!
	is_scalar($x):判断是否一个"标量类型"