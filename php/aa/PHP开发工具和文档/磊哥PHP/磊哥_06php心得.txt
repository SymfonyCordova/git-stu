函数
函数基础
	函数的定义
		形式 function 函数名([$形参1,][$形参1,][...]){
			函数体...
		}
		1、定义的实参就是变量,只能在函数内部使用
		2、形参作为变量,其名字是自己定义--自然遵循命名规范
	函数的调用
		函数名([$形参1,][$形参1,][...]);
		说明
			1、实参应该和形参一一对应
			2、实参就是数据值,可能是直接值(2，"acv")，也可能是变量(比如$a)
	函数调用详细过程
		1、首先，将函数调用时的实参数据,传递给函数形参变量
		2、程序的执行流程，进入函数内部--此时可以认为是一个跟外界隔离的独立运行空间。
		3、在函数内部按正常的流程顺序,执行其中的代码
		4、直到函数结束，则退出该运行空间，而返回到原来调用函数的位置,继续执行后续代码,并回到函数调用位置
		
函数参数
	函数形参的默认值
	我们可以给一个函数定义时的形参。赋值一个"默认值",则这个函数调用的时候,该形参对应的实参,可以不给值
		function f1($x=3,$y=4){
			$s=$x*$x+$y*$y;
			$result=sqrt($s);//求一个数的开方
			result $result;
		}
		$v1=f1(30,40);//传过去2个数据 x=30,y=40
		$v1=f1(30);//传过去1个数据 x=30,自动y=4
		$v1=f1();//传过去0个数据 自动x=3 ,自动y=4
	函数形参的默认值，可以只给部分形参默认值,但设置默认值的形参,都要放在"右边"(后边)
		function f2($a,$b=3,$c='abc'){
			echo '这是演示部分';
		}
		f2(1);
		f2(1,2);
		f2(1,2,'xyz')
		f2();//内部使用$a的话报错,不适用不报错 这是错误的
		没有f2(,20,30);
	形参的传值问题
		值传递
			这是默认值如果没有特别设定,参数传值都是值传递
		引用传递
			需要在形参的前面加&符号：
			function f3($a,& $b){
			$s=$a*$a+$b*$b;
			$result=sqrt($s);//求一个数的开方
			result $result;
			}
		$v1=f3(3,4)//这里报致命错误,因为4不能当做对应引用传递的形参的对应实参
					//这里,$b这个形参对应的实参,必须是一个变量,如下一行调用
		$s1=4;
		$v2=f3(3,$s1); 此时$s1变化了 $s1=16
	函数参数的数量问题
		1、通常,函数调用时的实参数量,应该跟函数定义时的形参数量保持一致
		2、如果函数定义时,形参有默认值,则对应的实参就可以进行一定程度的省略
			注意：省略只能从右往左进行。
		3、有一种定义和使用函数的特别形式(并不常见):它不定义形参，而实参任意给出。
			其实,系统中也有类似函数:,比如：
				var_dump($v1);
				var_dump($v1,$v2,$v3,....);//OK
				可见,该函数给以接受任意个数的实参
			我们可以自己定义这种函数,其实，这种函数,依赖的是以下3个系统函数来获取相应的信息,以
			得到实参数据处理：
			1：func_get_args()//获取实参数据列表,成为一个数组
			2：func_get_args($i)//获取第$i实参数据,$i从0开始算起：
			3：func_num_args();//获取实参数的个数
				function f4(){
					//系统函数fun_get_args()可以获取函数调用时传递过来的
					//所有实参数据,并且都放入一个数组中
					$arr=func_get_args();
					foreach($arr as $val){
						echo $val." ";
					}
				}
				f4(1,2,3);
				f4("aa","bb");
函数的返回值问题
	一个观念
		函数的返回值,不是语法规定,而是应用所需；需要就返回,不需要就无需返回
		返回值,一定是通过return语句
		
函数的其他形式
	可变函数
		先想想可变变量
			$v1='abc';
			$abc=123;
			echo $$v1; //123
	可变变量:一个变量的名字是还是一个变量
	可变函数:一个函数的名字是是一个变量！(灵活)
		function f1(){
			echo "<br/>这是一个普通函数"
		}
		$v1="f1";
		$v1();
	function jpg(){echo "<br/>处理jpg图片";}
	function png(){echo "<br/>处理png图片";}
	function jif(){echo "<br/>处理jif图片";}
	$file="abc.png";//用户上传文件
	$houzhuiming=strrchr($file,'.');
	$houzhuiming=substr($houzhuiming,1);
	$houzhuiming();

	匿名函数
		就是没有名字的函数
		2种形式
		形式1：将一个匿名函数赋值给一个变量
			 $f1=function (){
				echo "1223";
			 };
			 $f1();//调用和可变函数调用一样
			 
			 $f2=function ($p1,$p2){
				$result=$p1+$p2;
				return $result;
			 };	//注意分号		 
			 $rel=$f2(3,4);//这样调用才有意义
		形式2：是直接将一个匿名函数,当做实参来使用！--即调用"别的函数A的时候,使用一个匿名函数
		来当做实参。自然，在函数A中,也就应该对该匿名函数当做一个函数来用！
			function func1($a,$b,$c){
				$s1=$a+$b;
				$s2=$a-$b;
				$c($s1,$s2);
			}
			func1(3,4,function ($m1,$m2){echo "m1-$m2,m2-$m1";});//注意分号

变量的作用域问题
	变量的作用域,就是指：一个变量,在什么范围中可以使用的情况
	在php中,有3种变量作用域
		局部作用域
			就是指一个函数的内部范围
			对应的变量就是局部变量
		超全局作用域
			就是指所有代码范围
			对应的变量就是超全局变量
				其实就几个系统预定义的几个 $_GET $_POST $_SERVER $_REQUEST $GLOBALS $_SESSION $_COOKIE $_FILES
		全局作用域
			就是指不再函数内部的范围--函数外部
			对应的变量就是全局变量
	通常,全局范围不能访问局部变量，局部范围不能访问全局变量，函数内部的变量(局部变量),通常在函数调用执行结束后,就被"销毁"
		但有一种局部变量,在函数调用结束后不被销毁:，它叫做"静态变量"：
		使用形式：
			function 函数名(...){
				static $变量名 =初始值; //这就是静态变量
			}
			
			function f3(){
				static $c=0;//c值会保留 可以统计函数的调用次数 也可以用于你想要保留数据的项目中
				//静态变量仅在局部函数域中存在且只被初始化一次
				$c++;
				$d=0;
				$d++;
				echo "<br /> c=$c, d=$d ,此函数被调用次数为:$c" ;
			}
			f3();
			f3();
			f3();
			f3();
	如何在局部作用域访问全局变量(常见需求)
	有2种做法
		做法一 global
			$v4=4;
			function f4(){
				//在函数中,使用global来声明要使用的全局变量的同名局部变量
				global $v4; //这里,$v4是局部变量,只是跟全局的v4同名
							//实际情况是：此时外部v4变量跟内部的v4变量,共同
							//指向一个数据区---引用关系
				echo "<br/>在局部访问全局变量v4=$v4";
				$v4=44;//如果此时unset($v4)呢？ 不影响还是44
			}
			f4();
			echo "<br/>在全局再次访问V4=$v4";
			
		做法二
			$GLOBALS
			$v5=5;
			function f5(){
				echo "<br/>在局部访问全局变量v5= ".$GLOBALS['v5'];
				$GLOBALS['v5']=60;//修改其值
				unset($GLOBALS['v5']);
			}
			f5();
			echo "<br/>在全局再次访问V5= ".$v5;
			echo "<br/>在全局再次访问V5= ".$GLOBALS['v5'];	
			但是如果我们对$GLOBALS变量的某个单元(也即下标)进行unset(),则其值就会完全对应销毁该变量。
			因为,$GLOBALS对全局变量的是使用可以看做是全局变量的另一种语法形式而已,而不是"引用关系"

有关函数的系统函数
	function_exists : 判断一个函数是否被定义.其中使用的参数为"函数名"
	func_get_arg()
	func_get_args()
	func_num_args()
其他系统函数
	自己会查
	1、字符串函数
		字符串去除与填充：trim ltrim rtrim |   str_pad 
		字符串链接与分割：implode join  |  explode str_split
		字符串截取：substr  strchr strrchr
		字符串替换： str_replace substr_replace
		字符串长度与位置: strlen | strpos strrpos
		字符转换： strtolower strtoupper lcfirst ucfirst ucwords
		特殊字符处理：nl2br addslashes htmlspecialchars
	2、时间函数
		time microtime,mktime,date,idate,strtotime,date_add,date_diff,
		date_default_timezone_set,date_default_timezone_get
	3、数学函数
		max min round ceil floor abs sqrt pow rand
	
有关函数的编程思想
	递归思想----递归函数
	递归函数,就是：在一个函数内部调用它自己的函数！
	
		先考察一个最简单的函数
			function f1($sn){
				echo $sn;
				$n++;
				f1($sn);
			}
			f1(1);
		从这个简单的函数可以看出,该函数调用时"永无止境的"(没完没了)最终会将内存消耗完毕
		显然,这不是一个正常的做法！
		实用的递归函数是:能够控制这个函数的过程,会在某个时刻(条件下)停下来！
			
		实例演示
			求5的阶乘！ 先进去到底层再挨个出来
			function jiecheng($n){
					echo "<br/>开始有人要求{$n}的阶乘"
				if($n===1){
					echo "<br/>终于求到{$n}的阶乘：：1";
					return 1;
				}
				$jieguo =$n*jiecheng($n-1);
				echo "<br/>终于求到{$n}的阶乘：：{$jieguo}";
				return $jieguo;
			}
		递归思想的总结
			当面对一个"大问题",该大问题可以经由该问题的同类问题的"小一级问题"而经过简单计算获得,而且,可以获知(已知)
			这类问题的"最小一级问题"的答案。则,此时就可以使用递归方法来解决该问题
			则此时该函数的基本模式是：
				function digui($n){
					if(是最小一级){
						return 已知答案；
					}
					$jieguo = 对digui($n-1)进行简单运算
					return $jieguo;
				}
			小试牛刀 1 1 2 3 5 8 13 .... 
				第一项 第二项都是1
				其他项，是其前两项的和;
			用于扫描文件夹一层层进去再回来
	递推(迭代)思想
	也同样思考这个问题：
		求5的阶乘！
			$jiecheng1=1;
			$jiecheng2=jiecheng1*2;
			$jiecheng3=jiecheng2*3;
			$jiecheng4=jiecheng3*4;
			$jiecheng5=jiecheng4*5;
		改造
			$jiecheng=1;
			$jiecheng=jiecheng*2;
			$jiecheng=jiecheng*3;
			$jiecheng=jiecheng*4;
			$jiecheng=jiecheng*5;
		改造
			$jiecheng=1;
			for($i=2;$i<=5;++$i){
				$jiecheng=jiecheng*$i;
			}
		改造
			$qian=1;//前一个已知答案
			for($i=2;$i<=5;++$i){
				$jieguo=$qian*$i;
				$qian=$jieguo;//得到的结果作为下一次开始的前一个答案
			}		
	递推总结:
		如果要求一个"大问题"且该问题有如下2个特点：
			1、已知该问题的同类问题的最小问题的答案
			2、如果知道这种问题的小一级问题的答案,就可以轻松求得其"大一级"问题的答案,并且此问题的级次有一定的规律：
			$qian=已知的最小一级答案
			for($i=最小一级的下一级;$i<=最大一级;++$i){
				$jieguo=对$qian进行一定的计算,通常要使用$i;
				$qian=$jieguo;//得到的结果作为下一次开始的前一个答案
			}
			echo $jieguo